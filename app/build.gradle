apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'jacoco'
apply plugin: "de.javaansehz.cluecumber-report-gradle-plugin"

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.example.android.architecture.blueprints.master"
        testApplicationId 'com.example.android.architecture.blueprints.todoapp.tasks.test'
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner getInstrumentation()
    }

    android {
        sourceSets {
            String sharedTestDir = 'src/sharedTest/java'
            test {
                java.srcDirs += sharedTestDir
                resources.srcDirs += 'src/sharedTest/resources'
            }
            androidTest {
                java.srcDirs += sharedTestDir
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
            buildConfigField 'String', 'TEST_TAGS', '"' + getTestTags() + '"'
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
    }

    flavorDimensions "default"

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            dimension "default"
            applicationIdSuffix = ".mock"
        }
        prod {
            dimension "default"
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests {
        includeAndroidResources = true

        all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    dataBinding {
        enabled = true
        enabledForTests = true
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }
}

def getInstrumentation() {
    project.hasProperty('cucumber') ?
            'com.example.android.architecture.blueprints.todoapp.tasks.test.AndroidJUnitRunner' :
            'androidx.test.runner.AndroidJUnitRunner'
}
def getTestTags() {
    project.getProperties().get('tags') ?: ''
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {

    // App dependencies
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.cardview:cardview:$cardVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "androidx.annotation:annotation:$androidXAnnotations"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "androidx.legacy:legacy-support-v4:$androidXLegacySupport"
    implementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // Architecture Components
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    // Dependencies for local unit tests
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "androidx.navigation:navigation-testing:$navigationVersion"
    testImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    testImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    testImplementation "com.google.truth:truth:$truthVersion"

    // Dependencies for Android unit tests
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    // AndroidX Test - JVM testing
    testImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"
    testImplementation "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion"
    testImplementation "androidx.test:rules:$androidXTestRulesVersion"
    // Once https://issuetracker.google.com/127986458 is fixed this can be testImplementation
    debugImplementation "androidx.fragment:fragment-testing:$fragmentVersion"
    implementation "androidx.test:core:$androidXTestCoreVersion"
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"

    // AndroidX Test - Instrumented testing
    androidTestImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"
    androidTestImplementation "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion"
    androidTestImplementation "androidx.test:rules:$androidXTestRulesVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$archTestingVersion"
    androidTestImplementation "androidx.navigation:navigation-testing:$navigationVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"
    androidTestImplementation "org.robolectric:annotations:$robolectricVersion"
    implementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"

    // Resolve conflicts between main and test APK:
    androidTestImplementation "androidx.annotation:annotation:$androidXAnnotations"
    androidTestImplementation "androidx.legacy:legacy-support-v4:$androidXLegacySupport"
    androidTestImplementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    androidTestImplementation "androidx.appcompat:appcompat:$appCompatVersion"
    androidTestImplementation "com.google.android.material:material:$materialVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "androidx.fragment:fragment-ktx:$fragmentKtxVersion"

    //Cucumber
    androidTestImplementation 'io.cucumber:cucumber-android:4.9.0'
    androidTestImplementation 'io.cucumber:cucumber-picocontainer:4.8.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.0.3"
}
jacoco {
    toolVersion = "0.8.7"
}
configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}

task runInstrumentationTests {
    group "verification"
    mustRunAfter "deleteExistingCucumberReports"
    dependsOn "deleteExistingCucumberReports", "connectedMockDebugAndroidTest"
    finalizedBy "downloadCucumberReports"
}

task runInstrumentationTestsAndGenerateReport {
    group "verification"
    mustRunAfter "runInstrumentationTests"
    dependsOn "runInstrumentationTests", "generateCluecumberReports"
}

task downloadAndGenerateReport {
    group "verification"
    mustRunAfter "downloadCucumberReports"
    dependsOn "downloadCucumberReports", "generateCluecumberReports"
}

cluecumberReports {
    def localReportPath = new File(buildDir, "reports/cucumber")
    sourceJsonReportDirectory = localReportPath.getAbsolutePath()
    generatedHtmlReportDirectory = localReportPath.getAbsolutePath() + "/test"
}


/*
 * Downloads all Cucumber reports from the connected device.
 */
task downloadCucumberReports {
    group "Verification"
    description "Downloads the rich Cucumber report files (HTML, XML, JSON) from the connected device"

    doLast {
        def deviceSourcePath = getCucumberDevicePath()
        def localReportPath = new File(buildDir, "reports/cucumber")
        if (!localReportPath.exists()) {
            localReportPath.mkdirs()
        }
        if (!localReportPath.exists()) {
            throw new GradleException("Could not create $localReportPath")
        }
        def adb = getAdbPath()
        def files = getCucumberReportFileNames()
        files.each { fileName ->
            println fileName
            exec {
                commandLine adb, 'pull', "$deviceSourcePath/$fileName", localReportPath
            }
        }
    }
}

/**
 * Deletes existing Cucumber reports on the device.
 */
task deleteExistingCucumberReports {
    group "Verification"
    description "Removes the rich Cucumber report files (HTML, XML, JSON) from the connected device"
    doLast {
        def deviceSourcePath = getCucumberDevicePath()
        def files = getCucumberReportFileNames()
        files.each { fileName ->
            def deviceFileName = deviceSourcePath + '/' + fileName
            def output2 = executeAdb('if [ -d "' + deviceFileName + '" ]; then rm -r "' + deviceFileName + '"; else rm -r "' + deviceFileName + '" ; fi')
            println output2
        }
    }
}

/**
 * Sets the required permissions for Cucumber to write on the internal storage.
 */
task grantPermissions(dependsOn: 'installDebug') {
    doLast {
        def adb = getAdbPath()
        // We only set the permissions for the main application
        def mainPackageName = android.defaultConfig.applicationId
        def readPermission = "android.permission.READ_EXTERNAL_STORAGE"
        def writePermission = "android.permission.WRITE_EXTERNAL_STORAGE"
        exec { commandLine adb, 'shell', 'pm', 'grant', mainPackageName, readPermission }
        exec { commandLine adb, 'shell', 'pm', 'grant', mainPackageName, writePermission }
    }
}


// ==================================================================
// Utility methods
// ==================================================================

/**
 * Utility method to get the full ADB path
 * @return the absolute ADB path
 */
String getAdbPath() {
    def adb = android.getAdbExecutable().toString()
    if (adb.isEmpty()) {
        throw new GradleException("Could not detect adb path")
    }
    return adb
}

/**
 * Sometime adb returns '\r' character multiple times.
 * @param s the original string returned by adb
 * @return the fixed string without '\r'
 */
static def fixAdbOutput(String s) {
    return s.replaceAll("[\r\n]+", "\n").trim()
}

/**
 * Runs the adb tool
 * @param program the program which is executed on the connected device
 * @return the output of the adb tool
 */
def executeAdb(String program) {
    def process = new ProcessBuilder(getAdbPath(), "shell", program).redirectErrorStream(true).start()
    String text = new BufferedReader(new InputStreamReader(process.inputStream)).text
    return fixAdbOutput(text)
}

/**
 * The path which is used to store the Cucumber files.
 * @return
 */
static def getCucumberDevicePath() {
    return '/storage/emulated/0/Android/data/com.example.android.architecture.blueprints.master.mock/files/reports'
}

/**
 * @return the known Cucumber report files/directories
 */
static def getCucumberReportFileNames() {
    return ['cucumber.xml', 'cucumber.html', 'cucumber.json']
}
